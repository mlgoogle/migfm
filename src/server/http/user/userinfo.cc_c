#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include "client/linux/handler/exception_handler.h"
#include "fcgi_stdio.h"
//#include "fcgio.h"
//#include "fcgi_config.h"
#include "mig_log.h"
#include "config.h"
#include "user_mgr.h"


static bool DumpCallBack(const char* dump_path,const char* minidump_id,
			 void* contect,bool succeeded){

    
    printf("Dump path:%s/%s.dump\n",dump_path,minidump_id);
    MIG_LOG(USER_LEVEL,"Dump path:%s/%s.dump\n",dump_path,minidump_id);
    return succeeded;
}

static void GetRequestMethod(const char* query){
	
}

static void PostRequestMethod(std::string& content){

}

static void PutRequestMethod(std::string& content){

}

static void DeleteRequestMethod(std::string& content){

}

int main(int agrc,char* argv[]){
    
    google_breakpad::ExceptionHandler eh(".",NULL,DumpCallBack,NULL,true);
    std::string path = "./config.xml";
    FileConfig file_config;
    std::string content;
    const char* query;
    if((!file_config.LoadConfig(path))){
	    	return 1;
	}
	
    while(FCGI_Accept()==0){

		char *request_method = getenv("REQUEST_METHOD");
		if(strcmp(request_method,"POST")==0){
			std::cin>>content;
			PostRequestMethod(content);
		}
		
		else if(strcmp(request_method,"GET")==0){
			query = getenv("QUERY_STRING");
			GetRequestMethod(query);
		}
		
		else if(strcmp(request_method,"PUT")==0){
			std::cin>>content;
			PutRequestMethod(content);
		}
		
		else if(strcmp(request_method,"DELETE")==0){
			std::cin>>content;
			DeleteRequestMethod(content);
		}
		
		printf("Content-type: text/html\r\n"
	    "\r\n"
	    "<title>FastCGI echo</title>"
	    "<h1>FastCGI echo</h1>\n"
        "Process ID: %d<p>\n"
        , getpid());
    }
    UserMgr::FreeInstance();
    return 0;
}