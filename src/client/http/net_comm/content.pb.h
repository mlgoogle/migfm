// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content.proto

#ifndef PROTOBUF_content_2eproto__INCLUDED
#define PROTOBUF_content_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "metadata.pb.h"
// @@protoc_insertion_point(includes)

namespace schema {
namespace type {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_content_2eproto();
void protobuf_AssignDesc_content_2eproto();
void protobuf_ShutdownFile_content_2eproto();

class Content;

// ===================================================================

class Content : public ::google::protobuf::Message {
 public:
  Content();
  virtual ~Content();
  
  Content(const Content& from);
  
  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();
  
  void Swap(Content* other);
  
  // implements Message ----------------------------------------------
  
  Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // required string url = 2 [default = ""];
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional string base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline const ::std::string& base() const;
  inline void set_base(const ::std::string& value);
  inline void set_base(const char* value);
  inline void set_base(const char* value, size_t size);
  inline ::std::string* mutable_base();
  
  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  
  // optional string content_type = 5;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 5;
  inline const ::std::string& content_type() const;
  inline void set_content_type(const ::std::string& value);
  inline void set_content_type(const char* value);
  inline void set_content_type(const char* value, size_t size);
  inline ::std::string* mutable_content_type();
  
  // optional .net.type.Metadatas metadata = 6;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  inline const ::net::type::Metadatas& metadata() const;
  inline ::net::type::Metadatas* mutable_metadata();
  
  // @@protoc_insertion_point(class_scope:schema.type.Content)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 version_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* base_;
  static const ::std::string _default_base_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  ::std::string* content_type_;
  static const ::std::string _default_content_type_;
  ::net::type::Metadatas* metadata_;
  friend void  protobuf_AddDesc_content_2eproto();
  friend void protobuf_AssignDesc_content_2eproto();
  friend void protobuf_ShutdownFile_content_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Content* default_instance_;
};
// ===================================================================


// ===================================================================

// Content

// optional int32 version = 1 [default = 0];
inline bool Content::has_version() const {
  return _has_bit(0);
}
inline void Content::clear_version() {
  version_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Content::version() const {
  return version_;
}
inline void Content::set_version(::google::protobuf::int32 value) {
  _set_bit(0);
  version_ = value;
}

// required string url = 2 [default = ""];
inline bool Content::has_url() const {
  return _has_bit(1);
}
inline void Content::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Content::url() const {
  return *url_;
}
inline void Content::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Content::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Content::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string base = 3;
inline bool Content::has_base() const {
  return _has_bit(2);
}
inline void Content::clear_base() {
  if (base_ != &_default_base_) {
    base_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Content::base() const {
  return *base_;
}
inline void Content::set_base(const ::std::string& value) {
  _set_bit(2);
  if (base_ == &_default_base_) {
    base_ = new ::std::string;
  }
  base_->assign(value);
}
inline void Content::set_base(const char* value) {
  _set_bit(2);
  if (base_ == &_default_base_) {
    base_ = new ::std::string;
  }
  base_->assign(value);
}
inline void Content::set_base(const char* value, size_t size) {
  _set_bit(2);
  if (base_ == &_default_base_) {
    base_ = new ::std::string;
  }
  base_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::mutable_base() {
  _set_bit(2);
  if (base_ == &_default_base_) {
    base_ = new ::std::string;
  }
  return base_;
}

// optional bytes content = 4;
inline bool Content::has_content() const {
  return _has_bit(3);
}
inline void Content::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Content::content() const {
  return *content_;
}
inline void Content::set_content(const ::std::string& value) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Content::set_content(const char* value) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Content::set_content(const void* value, size_t size) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::mutable_content() {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// optional string content_type = 5;
inline bool Content::has_content_type() const {
  return _has_bit(4);
}
inline void Content::clear_content_type() {
  if (content_type_ != &_default_content_type_) {
    content_type_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Content::content_type() const {
  return *content_type_;
}
inline void Content::set_content_type(const ::std::string& value) {
  _set_bit(4);
  if (content_type_ == &_default_content_type_) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(value);
}
inline void Content::set_content_type(const char* value) {
  _set_bit(4);
  if (content_type_ == &_default_content_type_) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(value);
}
inline void Content::set_content_type(const char* value, size_t size) {
  _set_bit(4);
  if (content_type_ == &_default_content_type_) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content::mutable_content_type() {
  _set_bit(4);
  if (content_type_ == &_default_content_type_) {
    content_type_ = new ::std::string;
  }
  return content_type_;
}

// optional .net.type.Metadatas metadata = 6;
inline bool Content::has_metadata() const {
  return _has_bit(5);
}
inline void Content::clear_metadata() {
  if (metadata_ != NULL) metadata_->::net::type::Metadatas::Clear();
  _clear_bit(5);
}
inline const ::net::type::Metadatas& Content::metadata() const {
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::net::type::Metadatas* Content::mutable_metadata() {
  _set_bit(5);
  if (metadata_ == NULL) metadata_ = new ::net::type::Metadatas;
  return metadata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace schema

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_content_2eproto__INCLUDED
