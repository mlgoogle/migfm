// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metadata.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {
namespace type {

namespace {

const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadatas_Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadatas_Metadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_metadata_2eproto() {
  protobuf_AddDesc_metadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metadata.proto");
  GOOGLE_CHECK(file != NULL);
  Text_descriptor_ = file->message_type(0);
  static const int Text_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, text_),
  };
  Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text));
  Metadatas_descriptor_ = file->message_type(1);
  static const int Metadatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, values_),
  };
  Metadatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadatas_descriptor_,
      Metadatas::default_instance_,
      Metadatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadatas));
  Metadatas_Metadata_descriptor_ = Metadatas_descriptor_->nested_type(0);
  static const int Metadatas_Metadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas_Metadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas_Metadata, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas_Metadata, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas_Metadata, status_),
  };
  Metadatas_Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadatas_Metadata_descriptor_,
      Metadatas_Metadata::default_instance_,
      Metadatas_Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas_Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas_Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadatas_Metadata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadatas_descriptor_, &Metadatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadatas_Metadata_descriptor_, &Metadatas_Metadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metadata_2eproto() {
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Metadatas::default_instance_;
  delete Metadatas_reflection_;
  delete Metadatas_Metadata::default_instance_;
  delete Metadatas_Metadata_reflection_;
}

void protobuf_AddDesc_metadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::type::protobuf_AddDesc_schema_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016metadata.proto\022\010net.type\032\014schema.proto"
    "\"(\n\004Text\022\022\n\007version\030\001 \001(\005:\0011\022\014\n\004text\030\002 \002"
    "(\t\"\242\001\n\tMetadatas\022,\n\006values\030\001 \003(\0132\034.net.t"
    "ype.Metadatas.Metadata\032g\n\010Metadata\022\014\n\004na"
    "me\030\001 \002(\t\022\r\n\005value\030\002 \001(\t\022\023\n\013status_code\030\003"
    " \001(\r\022)\n\006status\030\004 \001(\0132\031.schema.type.Schem"
    "aStatus", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metadata.proto", &protobuf_RegisterTypes);
  Text::default_instance_ = new Text();
  Metadatas::default_instance_ = new Metadatas();
  Metadatas_Metadata::default_instance_ = new Metadatas_Metadata();
  Text::default_instance_->InitAsDefaultInstance();
  Metadatas::default_instance_->InitAsDefaultInstance();
  Metadatas_Metadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metadata_2eproto {
  StaticDescriptorInitializer_metadata_2eproto() {
    protobuf_AddDesc_metadata_2eproto();
  }
} static_descriptor_initializer_metadata_2eproto_;


// ===================================================================

const ::std::string Text::_default_text_;
#ifndef _MSC_VER
const int Text::kVersionFieldNumber;
const int Text::kTextFieldNumber;
#endif  // !_MSC_VER

Text::Text()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text::InitAsDefaultInstance() {
}

Text::Text(const Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1;
  text_ = const_cast< ::std::string*>(&_default_text_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text::~Text() {
  SharedDtor();
}

void Text::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New() const {
  return new Text;
}

void Text::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1;
    if (_has_bit(1)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // required string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1 [default = 1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1 [default = 1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Text::Swap(Text* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Metadatas_Metadata::_default_name_;
const ::std::string Metadatas_Metadata::_default_value_;
#ifndef _MSC_VER
const int Metadatas_Metadata::kNameFieldNumber;
const int Metadatas_Metadata::kValueFieldNumber;
const int Metadatas_Metadata::kStatusCodeFieldNumber;
const int Metadatas_Metadata::kStatusFieldNumber;
#endif  // !_MSC_VER

Metadatas_Metadata::Metadatas_Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadatas_Metadata::InitAsDefaultInstance() {
  status_ = const_cast< ::schema::type::SchemaStatus*>(&::schema::type::SchemaStatus::default_instance());
}

Metadatas_Metadata::Metadatas_Metadata(const Metadatas_Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadatas_Metadata::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  status_code_ = 0u;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadatas_Metadata::~Metadatas_Metadata() {
  SharedDtor();
}

void Metadatas_Metadata::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void Metadatas_Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadatas_Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadatas_Metadata_descriptor_;
}

const Metadatas_Metadata& Metadatas_Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();  return *default_instance_;
}

Metadatas_Metadata* Metadatas_Metadata::default_instance_ = NULL;

Metadatas_Metadata* Metadatas_Metadata::New() const {
  return new Metadatas_Metadata;
}

void Metadatas_Metadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    status_code_ = 0u;
    if (_has_bit(3)) {
      if (status_ != NULL) status_->::schema::type::SchemaStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadatas_Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status_code;
        break;
      }
      
      // optional uint32 status_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }
      
      // optional .schema.type.SchemaStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadatas_Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional uint32 status_code = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status_code(), output);
  }
  
  // optional .schema.type.SchemaStatus status = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadatas_Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional uint32 status_code = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status_code(), target);
  }
  
  // optional .schema.type.SchemaStatus status = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadatas_Metadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional uint32 status_code = 3;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }
    
    // optional .schema.type.SchemaStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadatas_Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadatas_Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadatas_Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadatas_Metadata::MergeFrom(const Metadatas_Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
    if (from._has_bit(2)) {
      set_status_code(from.status_code());
    }
    if (from._has_bit(3)) {
      mutable_status()->::schema::type::SchemaStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadatas_Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadatas_Metadata::CopyFrom(const Metadatas_Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadatas_Metadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void Metadatas_Metadata::Swap(Metadatas_Metadata* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(status_code_, other->status_code_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadatas_Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadatas_Metadata_descriptor_;
  metadata.reflection = Metadatas_Metadata_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Metadatas::kValuesFieldNumber;
#endif  // !_MSC_VER

Metadatas::Metadatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadatas::InitAsDefaultInstance() {
}

Metadatas::Metadatas(const Metadatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadatas::~Metadatas() {
  SharedDtor();
}

void Metadatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadatas_descriptor_;
}

const Metadatas& Metadatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metadata_2eproto();  return *default_instance_;
}

Metadatas* Metadatas::default_instance_ = NULL;

Metadatas* Metadatas::New() const {
  return new Metadatas;
}

void Metadatas::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.type.Metadatas.Metadata values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.type.Metadatas.Metadata values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.type.Metadatas.Metadata values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadatas::ByteSize() const {
  int total_size = 0;
  
  // repeated .net.type.Metadatas.Metadata values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadatas::MergeFrom(const Metadatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadatas::CopyFrom(const Metadatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadatas::IsInitialized() const {
  
  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void Metadatas::Swap(Metadatas* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadatas_descriptor_;
  metadata.reflection = Metadatas_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace net

// @@protoc_insertion_point(global_scope)
