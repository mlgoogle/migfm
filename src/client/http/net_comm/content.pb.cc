// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace type {

namespace {

const ::google::protobuf::Descriptor* Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_content_2eproto() {
  protobuf_AddDesc_content_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "content.proto");
  GOOGLE_CHECK(file != NULL);
  Content_descriptor_ = file->message_type(0);
  static const int Content_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, metadata_),
  };
  Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Content_descriptor_,
      Content::default_instance_,
      Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_content_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Content_descriptor_, &Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_content_2eproto() {
  delete Content::default_instance_;
  delete Content_reflection_;
}

void protobuf_AddDesc_content_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::type::protobuf_AddDesc_metadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcontent.proto\022\013schema.type\032\016metadata.p"
    "roto\"\210\001\n\007Content\022\022\n\007version\030\001 \001(\005:\0010\022\r\n\003"
    "url\030\002 \002(\t:\000\022\014\n\004base\030\003 \001(\t\022\017\n\007content\030\004 \001"
    "(\014\022\024\n\014content_type\030\005 \001(\t\022%\n\010metadata\030\006 \001"
    "(\0132\023.net.type.Metadatas", 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content.proto", &protobuf_RegisterTypes);
  Content::default_instance_ = new Content();
  Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_content_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_content_2eproto {
  StaticDescriptorInitializer_content_2eproto() {
    protobuf_AddDesc_content_2eproto();
  }
} static_descriptor_initializer_content_2eproto_;


// ===================================================================

const ::std::string Content::_default_url_;
const ::std::string Content::_default_base_;
const ::std::string Content::_default_content_;
const ::std::string Content::_default_content_type_;
#ifndef _MSC_VER
const int Content::kVersionFieldNumber;
const int Content::kUrlFieldNumber;
const int Content::kBaseFieldNumber;
const int Content::kContentFieldNumber;
const int Content::kContentTypeFieldNumber;
const int Content::kMetadataFieldNumber;
#endif  // !_MSC_VER

Content::Content()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Content::InitAsDefaultInstance() {
  metadata_ = const_cast< ::net::type::Metadatas*>(&::net::type::Metadatas::default_instance());
}

Content::Content(const Content& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Content::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  url_ = const_cast< ::std::string*>(&_default_url_);
  base_ = const_cast< ::std::string*>(&_default_base_);
  content_ = const_cast< ::std::string*>(&_default_content_);
  content_type_ = const_cast< ::std::string*>(&_default_content_type_);
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Content::~Content() {
  SharedDtor();
}

void Content::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (base_ != &_default_base_) {
    delete base_;
  }
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (content_type_ != &_default_content_type_) {
    delete content_type_;
  }
  if (this != default_instance_) {
    delete metadata_;
  }
}

void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_descriptor_;
}

const Content& Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

Content* Content::default_instance_ = NULL;

Content* Content::New() const {
  return new Content;
}

void Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (_has_bit(1)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    if (_has_bit(2)) {
      if (base_ != &_default_base_) {
        base_->clear();
      }
    }
    if (_has_bit(3)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
    if (_has_bit(4)) {
      if (content_type_ != &_default_content_type_) {
        content_type_->clear();
      }
    }
    if (_has_bit(5)) {
      if (metadata_ != NULL) metadata_->::net::type::Metadatas::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // required string url = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }
      
      // optional string base = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base().data(), this->base().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content_type;
        break;
      }
      
      // optional string content_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_metadata;
        break;
      }
      
      // optional .net.type.Metadatas metadata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required string url = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional string base = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base().data(), this->base().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->base(), output);
  }
  
  // optional bytes content = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }
  
  // optional string content_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content_type(), output);
  }
  
  // optional .net.type.Metadatas metadata = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required string url = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional string base = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base().data(), this->base().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->base(), target);
  }
  
  // optional bytes content = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }
  
  // optional string content_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content_type(), target);
  }
  
  // optional .net.type.Metadatas metadata = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string url = 2 [default = ""];
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base());
    }
    
    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // optional string content_type = 5;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_type());
    }
    
    // optional .net.type.Metadatas metadata = 6;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_url(from.url());
    }
    if (from._has_bit(2)) {
      set_base(from.base());
    }
    if (from._has_bit(3)) {
      set_content(from.content());
    }
    if (from._has_bit(4)) {
      set_content_type(from.content_type());
    }
    if (from._has_bit(5)) {
      mutable_metadata()->::net::type::Metadatas::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  return true;
}

void Content::Swap(Content* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(url_, other->url_);
    std::swap(base_, other->base_);
    std::swap(content_, other->content_);
    std::swap(content_type_, other->content_type_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_descriptor_;
  metadata.reflection = Content_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace schema

// @@protoc_insertion_point(global_scope)
