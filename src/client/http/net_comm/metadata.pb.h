// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#ifndef PROTOBUF_metadata_2eproto__INCLUDED
#define PROTOBUF_metadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "schema.pb.h"
// @@protoc_insertion_point(includes)

namespace net {
namespace type {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_metadata_2eproto();
void protobuf_AssignDesc_metadata_2eproto();
void protobuf_ShutdownFile_metadata_2eproto();

class Text;
class Metadatas;
class Metadatas_Metadata;

// ===================================================================

class Text : public ::google::protobuf::Message {
 public:
  Text();
  virtual ~Text();
  
  Text(const Text& from);
  
  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();
  
  void Swap(Text* other);
  
  // implements Message ----------------------------------------------
  
  Text* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 version = 1 [default = 1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
  // @@protoc_insertion_point(class_scope:net.type.Text)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 version_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Text* default_instance_;
};
// -------------------------------------------------------------------

class Metadatas_Metadata : public ::google::protobuf::Message {
 public:
  Metadatas_Metadata();
  virtual ~Metadatas_Metadata();
  
  Metadatas_Metadata(const Metadatas_Metadata& from);
  
  inline Metadatas_Metadata& operator=(const Metadatas_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadatas_Metadata& default_instance();
  
  void Swap(Metadatas_Metadata* other);
  
  // implements Message ----------------------------------------------
  
  Metadatas_Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadatas_Metadata& from);
  void MergeFrom(const Metadatas_Metadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  
  // optional uint32 status_code = 3;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 status_code() const;
  inline void set_status_code(::google::protobuf::uint32 value);
  
  // optional .schema.type.SchemaStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline const ::schema::type::SchemaStatus& status() const;
  inline ::schema::type::SchemaStatus* mutable_status();
  
  // @@protoc_insertion_point(class_scope:net.type.Metadatas.Metadata)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::google::protobuf::uint32 status_code_;
  ::schema::type::SchemaStatus* status_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Metadatas_Metadata* default_instance_;
};
// -------------------------------------------------------------------

class Metadatas : public ::google::protobuf::Message {
 public:
  Metadatas();
  virtual ~Metadatas();
  
  Metadatas(const Metadatas& from);
  
  inline Metadatas& operator=(const Metadatas& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadatas& default_instance();
  
  void Swap(Metadatas* other);
  
  // implements Message ----------------------------------------------
  
  Metadatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadatas& from);
  void MergeFrom(const Metadatas& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Metadatas_Metadata Metadata;
  
  // accessors -------------------------------------------------------
  
  // repeated .net.type.Metadatas.Metadata values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::net::type::Metadatas_Metadata& values(int index) const;
  inline ::net::type::Metadatas_Metadata* mutable_values(int index);
  inline ::net::type::Metadatas_Metadata* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::net::type::Metadatas_Metadata >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::type::Metadatas_Metadata >*
      mutable_values();
  
  // @@protoc_insertion_point(class_scope:net.type.Metadatas)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::net::type::Metadatas_Metadata > values_;
  friend void  protobuf_AddDesc_metadata_2eproto();
  friend void protobuf_AssignDesc_metadata_2eproto();
  friend void protobuf_ShutdownFile_metadata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Metadatas* default_instance_;
};
// ===================================================================


// ===================================================================

// Text

// optional int32 version = 1 [default = 1];
inline bool Text::has_version() const {
  return _has_bit(0);
}
inline void Text::clear_version() {
  version_ = 1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Text::version() const {
  return version_;
}
inline void Text::set_version(::google::protobuf::int32 value) {
  _set_bit(0);
  version_ = value;
}

// required string text = 2;
inline bool Text::has_text() const {
  return _has_bit(1);
}
inline void Text::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Text::text() const {
  return *text_;
}
inline void Text::set_text(const ::std::string& value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Text::set_text(const char* value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Text::set_text(const char* value, size_t size) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Text::mutable_text() {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// -------------------------------------------------------------------

// Metadatas_Metadata

// required string name = 1;
inline bool Metadatas_Metadata::has_name() const {
  return _has_bit(0);
}
inline void Metadatas_Metadata::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Metadatas_Metadata::name() const {
  return *name_;
}
inline void Metadatas_Metadata::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Metadatas_Metadata::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Metadatas_Metadata::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Metadatas_Metadata::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string value = 2;
inline bool Metadatas_Metadata::has_value() const {
  return _has_bit(1);
}
inline void Metadatas_Metadata::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Metadatas_Metadata::value() const {
  return *value_;
}
inline void Metadatas_Metadata::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Metadatas_Metadata::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Metadatas_Metadata::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Metadatas_Metadata::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// optional uint32 status_code = 3;
inline bool Metadatas_Metadata::has_status_code() const {
  return _has_bit(2);
}
inline void Metadatas_Metadata::clear_status_code() {
  status_code_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Metadatas_Metadata::status_code() const {
  return status_code_;
}
inline void Metadatas_Metadata::set_status_code(::google::protobuf::uint32 value) {
  _set_bit(2);
  status_code_ = value;
}

// optional .schema.type.SchemaStatus status = 4;
inline bool Metadatas_Metadata::has_status() const {
  return _has_bit(3);
}
inline void Metadatas_Metadata::clear_status() {
  if (status_ != NULL) status_->::schema::type::SchemaStatus::Clear();
  _clear_bit(3);
}
inline const ::schema::type::SchemaStatus& Metadatas_Metadata::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::schema::type::SchemaStatus* Metadatas_Metadata::mutable_status() {
  _set_bit(3);
  if (status_ == NULL) status_ = new ::schema::type::SchemaStatus;
  return status_;
}

// -------------------------------------------------------------------

// Metadatas

// repeated .net.type.Metadatas.Metadata values = 1;
inline int Metadatas::values_size() const {
  return values_.size();
}
inline void Metadatas::clear_values() {
  values_.Clear();
}
inline const ::net::type::Metadatas_Metadata& Metadatas::values(int index) const {
  return values_.Get(index);
}
inline ::net::type::Metadatas_Metadata* Metadatas::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::net::type::Metadatas_Metadata* Metadatas::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::type::Metadatas_Metadata >&
Metadatas::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::type::Metadatas_Metadata >*
Metadatas::mutable_values() {
  return &values_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metadata_2eproto__INCLUDED
