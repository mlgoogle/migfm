// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#ifndef PROTOBUF_response_2eproto__INCLUDED
#define PROTOBUF_response_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "metadata.pb.h"
// @@protoc_insertion_point(includes)

namespace response {
namespace type {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_response_2eproto();
void protobuf_AssignDesc_response_2eproto();
void protobuf_ShutdownFile_response_2eproto();

class Inlink;
class Inlinks;
class ResponseDatum;

// ===================================================================

class Inlink : public ::google::protobuf::Message {
 public:
  Inlink();
  virtual ~Inlink();
  
  Inlink(const Inlink& from);
  
  inline Inlink& operator=(const Inlink& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Inlink& default_instance();
  
  void Swap(Inlink* other);
  
  // implements Message ----------------------------------------------
  
  Inlink* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inlink& from);
  void MergeFrom(const Inlink& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string from_url = 1;
  inline bool has_from_url() const;
  inline void clear_from_url();
  static const int kFromUrlFieldNumber = 1;
  inline const ::std::string& from_url() const;
  inline void set_from_url(const ::std::string& value);
  inline void set_from_url(const char* value);
  inline void set_from_url(const char* value, size_t size);
  inline ::std::string* mutable_from_url();
  
  // required string anchor = 2;
  inline bool has_anchor() const;
  inline void clear_anchor();
  static const int kAnchorFieldNumber = 2;
  inline const ::std::string& anchor() const;
  inline void set_anchor(const ::std::string& value);
  inline void set_anchor(const char* value);
  inline void set_anchor(const char* value, size_t size);
  inline ::std::string* mutable_anchor();
  
  // @@protoc_insertion_point(class_scope:response.type.Inlink)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* from_url_;
  static const ::std::string _default_from_url_;
  ::std::string* anchor_;
  static const ::std::string _default_anchor_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Inlink* default_instance_;
};
// -------------------------------------------------------------------

class Inlinks : public ::google::protobuf::Message {
 public:
  Inlinks();
  virtual ~Inlinks();
  
  Inlinks(const Inlinks& from);
  
  inline Inlinks& operator=(const Inlinks& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Inlinks& default_instance();
  
  void Swap(Inlinks* other);
  
  // implements Message ----------------------------------------------
  
  Inlinks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inlinks& from);
  void MergeFrom(const Inlinks& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .response.type.Inlink inlink = 1;
  inline bool has_inlink() const;
  inline void clear_inlink();
  static const int kInlinkFieldNumber = 1;
  inline const ::response::type::Inlink& inlink() const;
  inline ::response::type::Inlink* mutable_inlink();
  
  // @@protoc_insertion_point(class_scope:response.type.Inlinks)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::response::type::Inlink* inlink_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Inlinks* default_instance_;
};
// -------------------------------------------------------------------

class ResponseDatum : public ::google::protobuf::Message {
 public:
  ResponseDatum();
  virtual ~ResponseDatum();
  
  ResponseDatum(const ResponseDatum& from);
  
  inline ResponseDatum& operator=(const ResponseDatum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseDatum& default_instance();
  
  void Swap(ResponseDatum* other);
  
  // implements Message ----------------------------------------------
  
  ResponseDatum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseDatum& from);
  void MergeFrom(const ResponseDatum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 fetch_time = 1 [default = 0];
  inline bool has_fetch_time() const;
  inline void clear_fetch_time();
  static const int kFetchTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 fetch_time() const;
  inline void set_fetch_time(::google::protobuf::uint64 value);
  
  // optional uint32 retries = 2 [default = 0];
  inline bool has_retries() const;
  inline void clear_retries();
  static const int kRetriesFieldNumber = 2;
  inline ::google::protobuf::uint32 retries() const;
  inline void set_retries(::google::protobuf::uint32 value);
  
  // optional uint32 fetch_interval = 3 [default = 1000];
  inline bool has_fetch_interval() const;
  inline void clear_fetch_interval();
  static const int kFetchIntervalFieldNumber = 3;
  inline ::google::protobuf::uint32 fetch_interval() const;
  inline void set_fetch_interval(::google::protobuf::uint32 value);
  
  // optional float score = 4 [default = 1];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline float score() const;
  inline void set_score(float value);
  
  // optional bytes signature = 5 [default = ""];
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 5;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  
  // optional uint64 modified_time = 6 [default = 0];
  inline bool has_modified_time() const;
  inline void clear_modified_time();
  static const int kModifiedTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 modified_time() const;
  inline void set_modified_time(::google::protobuf::uint64 value);
  
  // optional .net.type.Metadatas metadatas = 7;
  inline bool has_metadatas() const;
  inline void clear_metadatas();
  static const int kMetadatasFieldNumber = 7;
  inline const ::net::type::Metadatas& metadatas() const;
  inline ::net::type::Metadatas* mutable_metadatas();
  
  // @@protoc_insertion_point(class_scope:response.type.ResponseDatum)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 fetch_time_;
  ::google::protobuf::uint32 retries_;
  ::google::protobuf::uint32 fetch_interval_;
  float score_;
  ::std::string* signature_;
  static const ::std::string _default_signature_;
  ::google::protobuf::uint64 modified_time_;
  ::net::type::Metadatas* metadatas_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ResponseDatum* default_instance_;
};
// ===================================================================


// ===================================================================

// Inlink

// required string from_url = 1;
inline bool Inlink::has_from_url() const {
  return _has_bit(0);
}
inline void Inlink::clear_from_url() {
  if (from_url_ != &_default_from_url_) {
    from_url_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Inlink::from_url() const {
  return *from_url_;
}
inline void Inlink::set_from_url(const ::std::string& value) {
  _set_bit(0);
  if (from_url_ == &_default_from_url_) {
    from_url_ = new ::std::string;
  }
  from_url_->assign(value);
}
inline void Inlink::set_from_url(const char* value) {
  _set_bit(0);
  if (from_url_ == &_default_from_url_) {
    from_url_ = new ::std::string;
  }
  from_url_->assign(value);
}
inline void Inlink::set_from_url(const char* value, size_t size) {
  _set_bit(0);
  if (from_url_ == &_default_from_url_) {
    from_url_ = new ::std::string;
  }
  from_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Inlink::mutable_from_url() {
  _set_bit(0);
  if (from_url_ == &_default_from_url_) {
    from_url_ = new ::std::string;
  }
  return from_url_;
}

// required string anchor = 2;
inline bool Inlink::has_anchor() const {
  return _has_bit(1);
}
inline void Inlink::clear_anchor() {
  if (anchor_ != &_default_anchor_) {
    anchor_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Inlink::anchor() const {
  return *anchor_;
}
inline void Inlink::set_anchor(const ::std::string& value) {
  _set_bit(1);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(value);
}
inline void Inlink::set_anchor(const char* value) {
  _set_bit(1);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(value);
}
inline void Inlink::set_anchor(const char* value, size_t size) {
  _set_bit(1);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Inlink::mutable_anchor() {
  _set_bit(1);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  return anchor_;
}

// -------------------------------------------------------------------

// Inlinks

// required .response.type.Inlink inlink = 1;
inline bool Inlinks::has_inlink() const {
  return _has_bit(0);
}
inline void Inlinks::clear_inlink() {
  if (inlink_ != NULL) inlink_->::response::type::Inlink::Clear();
  _clear_bit(0);
}
inline const ::response::type::Inlink& Inlinks::inlink() const {
  return inlink_ != NULL ? *inlink_ : *default_instance_->inlink_;
}
inline ::response::type::Inlink* Inlinks::mutable_inlink() {
  _set_bit(0);
  if (inlink_ == NULL) inlink_ = new ::response::type::Inlink;
  return inlink_;
}

// -------------------------------------------------------------------

// ResponseDatum

// optional uint64 fetch_time = 1 [default = 0];
inline bool ResponseDatum::has_fetch_time() const {
  return _has_bit(0);
}
inline void ResponseDatum::clear_fetch_time() {
  fetch_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ResponseDatum::fetch_time() const {
  return fetch_time_;
}
inline void ResponseDatum::set_fetch_time(::google::protobuf::uint64 value) {
  _set_bit(0);
  fetch_time_ = value;
}

// optional uint32 retries = 2 [default = 0];
inline bool ResponseDatum::has_retries() const {
  return _has_bit(1);
}
inline void ResponseDatum::clear_retries() {
  retries_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ResponseDatum::retries() const {
  return retries_;
}
inline void ResponseDatum::set_retries(::google::protobuf::uint32 value) {
  _set_bit(1);
  retries_ = value;
}

// optional uint32 fetch_interval = 3 [default = 1000];
inline bool ResponseDatum::has_fetch_interval() const {
  return _has_bit(2);
}
inline void ResponseDatum::clear_fetch_interval() {
  fetch_interval_ = 1000u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ResponseDatum::fetch_interval() const {
  return fetch_interval_;
}
inline void ResponseDatum::set_fetch_interval(::google::protobuf::uint32 value) {
  _set_bit(2);
  fetch_interval_ = value;
}

// optional float score = 4 [default = 1];
inline bool ResponseDatum::has_score() const {
  return _has_bit(3);
}
inline void ResponseDatum::clear_score() {
  score_ = 1;
  _clear_bit(3);
}
inline float ResponseDatum::score() const {
  return score_;
}
inline void ResponseDatum::set_score(float value) {
  _set_bit(3);
  score_ = value;
}

// optional bytes signature = 5 [default = ""];
inline bool ResponseDatum::has_signature() const {
  return _has_bit(4);
}
inline void ResponseDatum::clear_signature() {
  if (signature_ != &_default_signature_) {
    signature_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ResponseDatum::signature() const {
  return *signature_;
}
inline void ResponseDatum::set_signature(const ::std::string& value) {
  _set_bit(4);
  if (signature_ == &_default_signature_) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ResponseDatum::set_signature(const char* value) {
  _set_bit(4);
  if (signature_ == &_default_signature_) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ResponseDatum::set_signature(const void* value, size_t size) {
  _set_bit(4);
  if (signature_ == &_default_signature_) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseDatum::mutable_signature() {
  _set_bit(4);
  if (signature_ == &_default_signature_) {
    signature_ = new ::std::string;
  }
  return signature_;
}

// optional uint64 modified_time = 6 [default = 0];
inline bool ResponseDatum::has_modified_time() const {
  return _has_bit(5);
}
inline void ResponseDatum::clear_modified_time() {
  modified_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::uint64 ResponseDatum::modified_time() const {
  return modified_time_;
}
inline void ResponseDatum::set_modified_time(::google::protobuf::uint64 value) {
  _set_bit(5);
  modified_time_ = value;
}

// optional .net.type.Metadatas metadatas = 7;
inline bool ResponseDatum::has_metadatas() const {
  return _has_bit(6);
}
inline void ResponseDatum::clear_metadatas() {
  if (metadatas_ != NULL) metadatas_->::net::type::Metadatas::Clear();
  _clear_bit(6);
}
inline const ::net::type::Metadatas& ResponseDatum::metadatas() const {
  return metadatas_ != NULL ? *metadatas_ : *default_instance_->metadatas_;
}
inline ::net::type::Metadatas* ResponseDatum::mutable_metadatas() {
  _set_bit(6);
  if (metadatas_ == NULL) metadatas_ = new ::net::type::Metadatas;
  return metadatas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace response

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_response_2eproto__INCLUDED
